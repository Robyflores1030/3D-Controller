MIME-Version: 1.0
Date: Sat, 13 Sep 2025 16:39:21 -0500
Message-ID: <CAEYnMTg2gAT8uWxFUpSPKfEEPjrh=mAYNpCvC65SUJNsh5wvnQ@mail.gmail.com>
Subject: Code
From: Roby Flores <floresbecerra4@gmail.com>
To: Roby Flores <floresbecerra4@gmail.com>
Content-Type: multipart/alternative; boundary="000000000000702114063eb59ae1"

--000000000000702114063eb59ae1
Content-Type: text/plain; charset="UTF-8"

<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>DualShock 4 Customizer</title>
<style>
body { margin: 0; overflow: hidden; font-family: sans-serif; }
#ui { position: absolute; top: 10px; left: 10px; background:
rgba(255,255,255,0.8); padding: 10px; border-radius: 8px; }
#ui label { display: block; margin-top: 5px; }
</style>
</head>
<body>
<div id="ui">
<label>Shell: <input type="color" id="shellColor" value="#555555"></label>
<label>Button A: <input type="color" id="buttonAColor"
value="#ff0000"></label>
<label>Button B: <input type="color" id="buttonBColor"
value="#00ff00"></label>
<label>Button X: <input type="color" id="buttonXColor"
value="#0000ff"></label>
<label>Button Y: <input type="color" id="buttonYColor"
value="#ffff00"></label>
<label>Trigger L: <input type="color" id="triggerLColor"
value="#0000ff"></label>
<label>Trigger R: <input type="color" id="triggerRColor"
value="#ff00ff"></label>
</div>

<script type="module">
import * as THREE from "
https://cdn.jsdelivr.net/npm/three@0.152.2/build/three.module.js";
import { GLTFLoader } from "
https://cdn.jsdelivr.net/npm/three@0.152.2/examples/jsm/loaders/GLTFLoader.js
";
import { OrbitControls } from "
https://cdn.jsdelivr.net/npm/three@0.152.2/examples/jsm/controls/OrbitControls.js
";

// Scene
const scene = new THREE.Scene();
const camera = new THREE.PerspectiveCamera(75,
window.innerWidth/window.innerHeight, 0.1, 1000);
camera.position.z = 5;

const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
renderer.setSize(window.innerWidth, window.innerHeight);
document.body.appendChild(renderer.domElement);

// Lights
const dirLight = new THREE.DirectionalLight(0xffffff, 1);
dirLight.position.set(10,10,10);
scene.add(dirLight);
scene.add(new THREE.AmbientLight(0x404040));

// Controls
const controls = new OrbitControls(camera, renderer.domElement);

// Load GLB
const loader = new GLTFLoader();
let controller;
let parts = {};

loader.load('
https://github.com/Robyflores1030/3D-Controller/raw/refs/heads/main/dualshock_4_playstation_controller.glb',
(gltf) => {
controller = gltf.scene;
scene.add(controller);

// Store parts by name for easy color updates
const names =
['Shell_Material','Button_A_Material','Button_B_Material','Button_X_Material','Button_Y_Material','Trigger_L_Material','Trigger_R_Material'];
names.forEach(name => {
const obj = controller.getObjectByName(name);
if(obj) parts[name] = obj.material;
});

// Initial colors
parts['Shell_Material']?.color.set(document.getElementById('shellColor').value);
parts['Button_A_Material']?.color.set(document.getElementById('buttonAColor').value);
parts['Button_B_Material']?.color.set(document.getElementById('buttonBColor').value);
parts['Button_X_Material']?.color.set(document.getElementById('buttonXColor').value);
parts['Button_Y_Material']?.color.set(document.getElementById('buttonYColor').value);
parts['Trigger_L_Material']?.color.set(document.getElementById('triggerLColor').value);
parts['Trigger_R_Material']?.color.set(document.getElementById('triggerRColor').value);
});

// Update colors when inputs change
['shellColor','buttonAColor','buttonBColor','buttonXColor','buttonYColor','triggerLColor','triggerRColor'].forEach(id
=> {
document.getElementById(id).addEventListener('input', (e)=>{
const nameMap = {
'shellColor':'Shell_Material',
'buttonAColor':'Button_A_Material',
'buttonBColor':'Button_B_Material',
'buttonXColor':'Button_X_Material',
'buttonYColor':'Button_Y_Material',
'triggerLColor':'Trigger_L_Material',
'triggerRColor':'Trigger_R_Material'
};
const part = parts[nameMap[id]];
if(part) part.color.set(e.target.value);
});
});

// Animate
function animate(){
requestAnimationFrame(animate);
renderer.render(scene,camera);
}
animate();

// Resize
window.addEventListener('resize', ()=>{
camera.aspect = window.innerWidth/window.innerHeight;
camera.updateProjectionMatrix();
renderer.setSize(window.innerWidth, window.innerHeight);
});
</script>
</body>
</html>

--000000000000702114063eb59ae1
Content-Type: text/html; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

<div>&lt;!DOCTYPE html&gt;<br>&lt;html lang=3D&quot;en&quot;&gt;<br>&lt;hea=
d&gt;<br>&lt;meta charset=3D&quot;UTF-8&quot;&gt;<br>&lt;title&gt;DualShock=
 4 Customizer&lt;/title&gt;<br>&lt;style&gt;<br>    body { margin: 0; overf=
low: hidden; font-family: sans-serif; }<br>    #ui { position: absolute; to=
p: 10px; left: 10px; background: rgba(255,255,255,0.8); padding: 10px; bord=
er-radius: 8px; }<br>    #ui label { display: block; margin-top: 5px; }<br>=
&lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div id=3D&quot;ui&qu=
ot;&gt;<br>    &lt;label&gt;Shell: &lt;input type=3D&quot;color&quot; id=3D=
&quot;shellColor&quot; value=3D&quot;#555555&quot;&gt;&lt;/label&gt;<br>   =
 &lt;label&gt;Button A: &lt;input type=3D&quot;color&quot; id=3D&quot;butto=
nAColor&quot; value=3D&quot;#ff0000&quot;&gt;&lt;/label&gt;<br>    &lt;labe=
l&gt;Button B: &lt;input type=3D&quot;color&quot; id=3D&quot;buttonBColor&q=
uot; value=3D&quot;#00ff00&quot;&gt;&lt;/label&gt;<br>    &lt;label&gt;Butt=
on X: &lt;input type=3D&quot;color&quot; id=3D&quot;buttonXColor&quot; valu=
e=3D&quot;#0000ff&quot;&gt;&lt;/label&gt;<br>    &lt;label&gt;Button Y: &lt=
;input type=3D&quot;color&quot; id=3D&quot;buttonYColor&quot; value=3D&quot=
;#ffff00&quot;&gt;&lt;/label&gt;<br>    &lt;label&gt;Trigger L: &lt;input t=
ype=3D&quot;color&quot; id=3D&quot;triggerLColor&quot; value=3D&quot;#0000f=
f&quot;&gt;&lt;/label&gt;<br>    &lt;label&gt;Trigger R: &lt;input type=3D&=
quot;color&quot; id=3D&quot;triggerRColor&quot; value=3D&quot;#ff00ff&quot;=
&gt;&lt;/label&gt;<br>&lt;/div&gt;<br><br>&lt;script type=3D&quot;module&qu=
ot;&gt;<br>import * as THREE from &quot;<a href=3D"https://cdn.jsdelivr.net=
/npm/three@0.152.2/build/three.module.js">https://cdn.jsdelivr.net/npm/thre=
e@0.152.2/build/three.module.js</a>&quot;;<br>import { GLTFLoader } from &q=
uot;<a href=3D"https://cdn.jsdelivr.net/npm/three@0.152.2/examples/jsm/load=
ers/GLTFLoader.js">https://cdn.jsdelivr.net/npm/three@0.152.2/examples/jsm/=
loaders/GLTFLoader.js</a>&quot;;<br>import { OrbitControls } from &quot;<a =
href=3D"https://cdn.jsdelivr.net/npm/three@0.152.2/examples/jsm/controls/Or=
bitControls.js">https://cdn.jsdelivr.net/npm/three@0.152.2/examples/jsm/con=
trols/OrbitControls.js</a>&quot;;<br><br>// Scene<br>const scene =3D new TH=
REE.Scene();<br>const camera =3D new THREE.PerspectiveCamera(75, window.inn=
erWidth/window.innerHeight, 0.1, 1000);<br>camera.position.z =3D 5;<br><br>=
const renderer =3D new THREE.WebGLRenderer({ antialias: true, alpha: true }=
);<br>renderer.setSize(window.innerWidth, window.innerHeight);<br>document.=
body.appendChild(renderer.domElement);<br><br>// Lights<br>const dirLight =
=3D new THREE.DirectionalLight(0xffffff, 1);<br>dirLight.position.set(10,10=
,10);<br>scene.add(dirLight);<br>scene.add(new THREE.AmbientLight(0x404040)=
);<br><br>// Controls<br>const controls =3D new OrbitControls(camera, rende=
rer.domElement);<br><br>// Load GLB<br>const loader =3D new GLTFLoader();<b=
r>let controller;<br>let parts =3D {};<br><br>loader.load(&#39;<a href=3D"h=
ttps://github.com/Robyflores1030/3D-Controller/raw/refs/heads/main/dualshoc=
k_4_playstation_controller.glb">https://github.com/Robyflores1030/3D-Contro=
ller/raw/refs/heads/main/dualshock_4_playstation_controller.glb</a>&#39;, (=
gltf) =3D&gt; {<br>    controller =3D gltf.scene;<br>    scene.add(controll=
er);<br><br>    // Store parts by name for easy color updates<br>    const =
names =3D [&#39;Shell_Material&#39;,&#39;Button_A_Material&#39;,&#39;Button=
_B_Material&#39;,&#39;Button_X_Material&#39;,&#39;Button_Y_Material&#39;,&#=
39;Trigger_L_Material&#39;,&#39;Trigger_R_Material&#39;];<br>    names.forE=
ach(name =3D&gt; {<br>        const obj =3D controller.getObjectByName(name=
);<br>        if(obj) parts[name] =3D obj.material;<br>    });<br><br>    /=
/ Initial colors<br>    parts[&#39;Shell_Material&#39;]?.color.set(document=
.getElementById(&#39;shellColor&#39;).value);<br>    parts[&#39;Button_A_Ma=
terial&#39;]?.color.set(document.getElementById(&#39;buttonAColor&#39;).val=
ue);<br>    parts[&#39;Button_B_Material&#39;]?.color.set(document.getEleme=
ntById(&#39;buttonBColor&#39;).value);<br>    parts[&#39;Button_X_Material&=
#39;]?.color.set(document.getElementById(&#39;buttonXColor&#39;).value);<br=
>    parts[&#39;Button_Y_Material&#39;]?.color.set(document.getElementById(=
&#39;buttonYColor&#39;).value);<br>    parts[&#39;Trigger_L_Material&#39;]?=
.color.set(document.getElementById(&#39;triggerLColor&#39;).value);<br>    =
parts[&#39;Trigger_R_Material&#39;]?.color.set(document.getElementById(&#39=
;triggerRColor&#39;).value);<br>});<br><br>// Update colors when inputs cha=
nge<br>[&#39;shellColor&#39;,&#39;buttonAColor&#39;,&#39;buttonBColor&#39;,=
&#39;buttonXColor&#39;,&#39;buttonYColor&#39;,&#39;triggerLColor&#39;,&#39;=
triggerRColor&#39;].forEach(id =3D&gt; {<br>    document.getElementById(id)=
.addEventListener(&#39;input&#39;, (e)=3D&gt;{<br>        const nameMap =3D=
 {<br>            &#39;shellColor&#39;:&#39;Shell_Material&#39;,<br>       =
     &#39;buttonAColor&#39;:&#39;Button_A_Material&#39;,<br>            &#3=
9;buttonBColor&#39;:&#39;Button_B_Material&#39;,<br>            &#39;button=
XColor&#39;:&#39;Button_X_Material&#39;,<br>            &#39;buttonYColor&#=
39;:&#39;Button_Y_Material&#39;,<br>            &#39;triggerLColor&#39;:&#3=
9;Trigger_L_Material&#39;,<br>            &#39;triggerRColor&#39;:&#39;Trig=
ger_R_Material&#39;<br>        };<br>        const part =3D parts[nameMap[i=
d]];<br>        if(part) part.color.set(e.target.value);<br>    });<br>});<=
br><br>// Animate<br>function animate(){<br>    requestAnimationFrame(anima=
te);<br>    renderer.render(scene,camera);<br>}<br>animate();<br><br>// Res=
ize<br>window.addEventListener(&#39;resize&#39;, ()=3D&gt;{<br>    camera.a=
spect =3D window.innerWidth/window.innerHeight;<br>    camera.updateProject=
ionMatrix();<br>    renderer.setSize(window.innerWidth, window.innerHeight)=
;<br>});<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;</div>

--000000000000702114063eb59ae1--